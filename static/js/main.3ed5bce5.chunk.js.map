{"version":3,"sources":["Todo/TodoList.js","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["SPAN","styled","span","TodoList","props","tList","map","item","i","className","key","type","onChange","checkboxHandler","toast","transition","Zoom","onClick","editButtonHandler","deleteButtonHandler","Todo","state","items","term","flg","id","isChecked","optionInputHandler","event","setState","target","value","addButtonHandler","prevState","checkFunc","deleteFunc","deletedItem","splice","splicedList","filter","editFunc","updateButtonHandler","localStorage","setItem","JSON","stringify","this","placeholder","disabled","checked","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ed5bce5.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { ToastContainer, toast, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport './TodoList.css';\n\nconst SPAN = styled.span`\n  padding: 2px;\n  margin-right: 1rem;\n`;\n\n\nexport default function TodoList(props) {\n\n  const { tList } = props;\n\n  const deleteButtonHandler = i => props.deleteButtonHandler(i);\n  const editButtonHandler = i => props.editButtonHandler(i);\n  const checkboxHandler = i => {\n    props.checkboxHandler(i);\n    toast(props.tList[i]);\n  }\n\n  return (\n    <div >\n      {\n        tList.map((item, i) => (\n          <div className=\"list-items\" key={i} >\n            <input type=\"checkbox\" onChange={() => checkboxHandler(i)} />\n            <p><SPAN>{i + 1}.</SPAN>{item}</p>\n            <ToastContainer transition={Zoom} />\n            <button className=\"editBtn\" onClick={() => editButtonHandler(i)}>Edit</button>\n            <button className=\"deleteBtn\" onClick={() => deleteButtonHandler(i)}>Remove</button>\n          </div>\n        ))\n      }\n    </div >\n  );\n};\n\n// (!this.props.checked) ? \"striked\" : null","import React, { Component } from 'react';\n\nimport './Todo.css';\nimport TodoList from './TodoList';\n\nclass Todo extends Component {\n\n  state = {\n    items: [],\n    term: \"\",\n    flg: false,\n    id: 0,\n    isChecked: false,\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.items));\n  }\n\n  optionInputHandler = event => {\n\n    this.setState({\n      term: event.target.value,\n    });\n  }\n\n  addButtonHandler = () => {\n    this.setState(prevState => ({\n      items: [...prevState.items, prevState.term],\n      term: \"\",\n      flg: false,\n    }));\n  }\n\n  checkFunc = (id) => {\n    // if (this.state.id === id) {\n    //   this.setState({\n    //     isChecked: !this.state.isChecked\n    //   });\n    // }\n    // this.setState({\n    //   items: this.state.items.map((item) => {\n    //     if (item.id === id) {\n    //       item.isChecked = !item.isChecked\n    //     }\n    //     return item;\n    //   )\n    // });\n  }\n\n  deleteFunc = (id) => {\n    const deletedItem = this.state.items.splice(id, 1);\n    const splicedList = this.state.items.filter(i => i = deletedItem);\n    this.setState({\n      items: [...splicedList],\n    });\n  }\n\n  editFunc = (id) => {\n    this.setState({\n      term: this.state.items[id],\n      id,\n      flg: true,\n    });\n  }\n\n  updateButtonHandler = () => {\n    this.state.items.splice(this.state.id, 1, this.state.term);\n    this.setState({\n      items: this.state.items,\n      term: \"\",\n      flg: false,\n    });\n  }\n\n  render() {\n    const { items, term, flg, isChecked } = this.state;\n    return (\n      <div className=\"todo-container\">\n        <h1>What Should I do ?</h1>\n        <div className=\"list-container\">\n          <div className=\"input-container\">\n            <input type=\"text\" placeholder=\"Enter your option\" onChange={this.optionInputHandler} value={term} />\n            {(flg === false) ?\n              <button type=\"submit\" className=\"addBtn\" disabled={!term} onClick={this.addButtonHandler}>Add</button> :\n              <button type=\"submit\" className=\"addBtn\" onClick={this.updateButtonHandler}>Update</button>\n            }\n          </div>\n          <TodoList\n            checked={isChecked}\n            tList={items}\n            checkboxHandler={(id) => this.checkFunc(id)}\n            deleteButtonHandler={(id) => this.deleteFunc(id)}\n            editButtonHandler={(id) => this.editFunc(id)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;","import React from 'react';\n\nimport './App.css';\nimport Todo from './Todo/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>TODO App</h1>\n      </header>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}